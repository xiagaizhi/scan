// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:scan/model/user_info_entity.dart';
import 'package:scan/generated/json/user_info_entity_helper.dart';
import 'package:scan/model/code_entity.dart';
import 'package:scan/generated/json/code_entity_helper.dart';
import 'package:scan/model/secret_entity.dart';
import 'package:scan/generated/json/secret_entity_helper.dart';
import 'package:scan/model/result_data.dart';
import 'package:scan/generated/json/result_data_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case UserInfoEntity:
			return userInfoEntityFromJson(data as UserInfoEntity, json) as T;			case UserInfoUserRelation:
			return userInfoUserRelationFromJson(data as UserInfoUserRelation, json) as T;			case CodeBeanEntity:
			return codeBeanEntityFromJson(data as CodeBeanEntity, json) as T;			case CodeBeanData:
			return codeBeanDataFromJson(data as CodeBeanData, json) as T;			case SecretEntity:
			return secretEntityFromJson(data as SecretEntity, json) as T;			case ResultData:
			return resultDataFromJson(data as ResultData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case UserInfoEntity:
			return userInfoEntityToJson(data as UserInfoEntity);			case UserInfoUserRelation:
			return userInfoUserRelationToJson(data as UserInfoUserRelation);			case CodeBeanEntity:
			return codeBeanEntityToJson(data as CodeBeanEntity);			case CodeBeanData:
			return codeBeanDataToJson(data as CodeBeanData);			case SecretEntity:
			return secretEntityToJson(data as SecretEntity);			case ResultData:
			return resultDataToJson(data as ResultData);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'UserInfoEntity':
			return UserInfoEntity().fromJson(json);			case 'UserInfoUserRelation':
			return UserInfoUserRelation().fromJson(json);			case 'CodeBeanEntity':
			return CodeBeanEntity().fromJson(json);			case 'CodeBeanData':
			return CodeBeanData().fromJson(json);			case 'SecretEntity':
			return SecretEntity().fromJson(json);			case 'ResultData':
			return ResultData().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'UserInfoEntity':
			return List<UserInfoEntity>();			case 'UserInfoUserRelation':
			return List<UserInfoUserRelation>();			case 'CodeBeanEntity':
			return List<CodeBeanEntity>();			case 'CodeBeanData':
			return List<CodeBeanData>();			case 'SecretEntity':
			return List<SecretEntity>();			case 'ResultData':
			return List<ResultData>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}